# E CD 16, lasts 10 sec Mana: 45 Range = 525 Max = 675     Magic Splash Damage: 20 / 30 / 40 / 50 / 60 (+ 25% AP) (+ 20 / 25 / 30 / 35 / 40% AD)
# E 20 / 30 / 40 / 50 / 60 (+ 25% AP) Splash Damage: 20 / 30 / 40 / 50 / 60 (+ 25% AP)
# W Heal: 60 / 105 / 150 / 195 / 240 (45%)     Movement Speed: 18 / 21 / 24 / 27 / 30% (+ 7% per 100 AP)  COST: 60 / 70 / 80 / 90 / 100 Mana CD: 15
# Q RANGE: 650 COST: 70 / 75 / 80 / 85 / 90 Mana     (+ 60% AP) (+ 100% Bonus AD)  Slow: 35 / 40 / 45 / 50 / 55%
MS <-335
# install.packages("partitions")
# library("partitions")
# install.packages("iterpc")
# library("iterpc")
Level = 5
Seconds = 10
QCD = 8
AD <- round(0.0467621*(Level^2)+1.93195*(Level)+53.8897)
AS <- round(1/(0.638*(0.000384417*(Level^2)+0.0146961*Level+0.984902)),digits=3)
# HP <- round(1.62255*(Level^2)+62.1716*(Level)+510.206)
# HpRegen <- round(0.013532*(Level^2)+0.491086*(Level)+7.79363)
# ManaRegen <- round(0.0139964*(Level^2)+0.534069*(Level)+5.46422)
Mana <- round(0.698013*(Level^2)+26.7377*Level+294.652)
Armor <- round(0.0612616*(Level^2)+2.33603*(Level)+24.4799)
MR <- 30
Time <- seq(0,Seconds,.001)
# DMGTrigger <- Time[Time%%AS==0]
DMGTrigger <- Time[which(round(Time%%AS,digits=5)==0)]#|round(Time%%QCD,digits=5)==0)]

Ability <- NULL
# Ability <- matrix(c(1,0,0,0,1,0,0,0,1,0,0,0),nrow=3,ncol =4) #Level 1
a <- restrictedparts(Level,4)
b <- a[,which(a[1,]<=ceiling(Level/2) & a[1,]<=5)]
c <- as.data.frame(as.matrix(b))
for(p in 1:ncol(c)){
  d <- c[,p]
  I <- iterpc(table(d),nrow(d),ordered=TRUE)
  z <- getall(I)
  ult <- z[z[,4]<=floor((Level-1)/5),]
  Ability <- rbind(Ability,ult)
}

colnames(Ability) <- c("Q","W","E","R")
Ability[,1] <- ifelse(Ability[,1]!=0,50*Ability[,1]+10,0)
# Ability[,2]
Ability[,3] <- ifelse(Ability[,3]!=0,10*Ability[,3]+10,0)
# Ability[,4]
# Ability

Damage <- matrix(nrow=(length(DMGTrigger)),ncol=(nrow(Ability)*2+3))
Damage[,1] <- DMGTrigger
# colnames(Damage) <- c("Time","AutoDMG","AutosNum","EDMG","QNum","TotalDmg")
# for(j in 1:nrow(Ability)){
for(j in 1:nrow(Ability)){
  for(i in 1:(length(DMGTrigger))){
    if((Damage[i,1]/AS) <= 5){
      ShrededArmor <- Armor*(1-.03*((Damage[i,1]/AS)-1))
      ShrededMR <- MR*(1-.03*(Damage[i,1]/AS))
      Damage[i,2] <- floor(Damage[i,1]/AS)*(AD*(100/(ShrededArmor+100)))
      Damage[i,3+j] <- round((Damage[i,1]/AS)*(Ability[j,3]*100/(ShrededMR+100)), digits =2)
      Damage[i,nrow(Ability)+3+j] <- round(Ability[j,1]*100/(ShrededMR+100),digits=2)
    } else if((Damage[i,1]/AS) > 5){
      ShrededArmor <- Armor*.85
      ShrededMR <- MR*.85
      Damage[i,2] <- floor(Damage[i,1]/AS)*(AD*(100/(ShrededArmor+100)))
      Damage[i,3+j] <- round((Damage[i,1]/AS)*(Ability[j,3]*100/(ShrededMR+100)), digits =2)
      Damage[i,nrow(Ability)+3+j] <- round(Ability[j,1]*100/(ShrededMR+100),digits=2)
    }
    #     Damage[i,7] <- Ability[,1]
    Damage[i,3] <- floor(Damage[i,1]/AS)
  }
}
Damage
# rowSums(Damage[,c(3+3,15+3)])
# rowSums(Damage[,c(3+5,15+5)])
# rowSums(Damage[,c(3+7,15+7)])
# rowSums(Damage[,c(3+9,15+9)])
# rowSums(Damage[,c(3+11,15+11)])
# Ability[c(3,5,7,9,11),]
